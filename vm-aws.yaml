- hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - vars/vars.yml
  tasks:
  - name: Download regular hosts user data file
    get_url:
      url: https://raw.githubusercontent.com/mglantz/ansible-vm-demo/master/scripts/host-prep.sh
      dest: /tmp/host-prep.sh
      validate_certs: no
      force: yes
  - name: Create empty file to store VM public IPs
    file:
      path: "./vm_instances.out"
      state: touch

  - name: Ensure a security group for VM systems is in place
    ec2_group:
      name: "{{ ec2_security_group_vm_systems }}"
      description: Security Group for VMs
      region: "{{ ec2_region }}"
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
#          group_name: "{{ ec2_security_group_tower}}"
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
#        - proto: icmp
#          from_port: -1
#          to_port: -1
#          group_name: "{{ ec2_security_group_tower}}"
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0

  - name: Provision the systems which are to be managed with Ansible
    ec2:
      aws_access_key: "{{ec2_access_key}}"
      aws_secret_key: "{{ec2_secret_key}}"
      key_name: "{{ec2_key}}"
      region: "{{ ec2_region }}"
      group: "{{ ec2_security_group_vm_systems }}"
      instance_type: t2.micro
      image: "{{ ami_id }}"
      user_data: "{{ lookup('file', '/tmp/host-prep.sh') }}"
      wait: true
      exact_count: "{{ number_of_client_systems }}"
      count_tag:
        identity: system
      instance_tags:
        identity: system
    register: ec2micro

  - name: Add client instance public IPs to host group
    add_host: hostname={{ item.public_ip }} groups=ec2micro
    with_items: "{{ ec2micro.tagged_instances }}"

  - name: Print IP addresses of regular systems
    debug:
      msg: "{{ groups['ec2micro'] }}"

  - name: Print IP addresses of regular systems to ./client_instances.out
    lineinfile:
      path: ./vm_instances.out
      line: "{{ item.public_ip }}"
      create: yes
    with_items: "{{ ec2micro.tagged_instances }}"
